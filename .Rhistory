data_raw <- read.csv('data.csv')
View(data_raw)
str(data_raw)
remove(data_raw$Flag)
drop(data_raw$Flag)
data_raw <- drop(data_raw$Flag)
data_raw <- read.csv('data.csv')
droplevels(data_raw$Flag)
droplevels.data.frame(data_raw$Flag)
str(data_raw)
drop_urls <- c('Flag', 'Club Logo', 'Photo')
new_df <- data_raw(:,-drop_urls)
new_df <- data_raw[:,-drop_urls]
new_df <- data_raw[,-drop_urls]
drop_urls <- ['Flag', 'Club Logo', 'Photo']
drop_urls <- list('Flag', 'Club Logo', 'Photo')
new_df <- data_raw[,-drop_urls]
remove(data_raw$Flag)
str(data_raw)
drop_urls <- subset(data_raw, drop = c('Flag','Club Logo', 'Photo'))
drop_urls <- subset(data_raw, select = -c('Flag','Club Logo', 'Photo'))
drop_urls <- subset(data_raw, select = -c(Flag,Club Logo, Photo))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo))
data_raw <- read.csv('data.csv').subset(data_raw, select = -c(Flag,Club.Logo, Photo))
str(drop_urls)
outputs <- subset(drop_urls, select = c(Value, Wage))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
str(drop_urls)
library(dplyr)
drop_urls <- mutate_all(drop_urls, function(x) as.numeric(as.character(x)))
warnings()
str(drop_urls)
data_raw <- read.csv('data.csv')
outputs <- subset(drop_urls, select = c(Value, Wage))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
outputs <- subset(data_raw, select = c(Value, Wage))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
str(drop_urls)
as.numeric(subset(drop_urls, select = c(Joined,Contract.Valid.Until, Weight)))
as.numeric(as.character(subset(drop_urls, select = c(Joined,Contract.Valid.Until, Weight))))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
#drop_urls <- mutate_all(drop_urls, function(x) as.numeric(as.character(x)))
as.numeric(subset(drop_urls, select = c(Joined,Contract.Valid.Until, Weight)))
#drop_urls <- mutate_all(drop_urls, function(x) as.numeric(as.character(x)))
as.numeric(drop_urls[subset(drop_urls, select = c(Joined,Contract.Valid.Until, Weight))])
as.numeric(drop_urls$Contract.Valid.Until)
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
summary(drop_urls$Contract.Valid.Until)
is.na(drop_urls)
count(is.na(data_raw))
count(is.na(data_raw) == TRUE)
str(drop_urls)
drop_urls$Contract.Valid.Until <- as.numeric(drop_urls$Contract.Valid.Until)
View(drop_urls)
str(drop_urls)
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
sum(is.na(drop_urls$Contract.Valid.Until))
drop_urls$Contract.Valid.Until <- as.numeric(drop_urls$Contract.Valid.Until)
View(drop_urls)
str(drop_urls$Contract.Valid.Until)
summary(drop_urls$Contract.Valid.Until)
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
summary(drop_urls$Contract.Valid.Until)
drop_urls$Contract.Valid.Until <- as.numeric(drop_urls$Contract.Valid.Until)
summary(drop_urls$Contract.Valid.Until)
which(is.na(drop_urls$Contract.Valid.Until))
View(drop_urls)
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
library(lubridate)
parse_date_time(drop_urls$Contract.Valid.Until, orders = c('y', 'bdY', 'dbY'))
drop_urls$Contract.Valid.Until <- parse_date_time(drop_urls$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
drop_urls$Contract.Valid.Until <- parse_date_time(drop_urls$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
x <- parse_date_time(drop_urls$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
sum(is.na(x))
which(is.na(x))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
which(is.null(drop_urls$Contract.Valid.Until))
print(drop_urls$Contract.Valid.Until[453])
data_raw <- read.csv('data.csv', na.strings = c('',' ', 'NA'))
outputs <- subset(data_raw, select = c(Value, Wage))
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
which(is.na(drop_urls$Contract.Valid.Until))
y <- which(is.na(drop_urls$Contract.Valid.Until))
z <- which(is.na(x))
all(y == z)
x <- parse_date_time(drop_urls$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
parse_date_time(drop_urls$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
str(drop_urls)
drop_urls$Contract.Valid.Until <- parse_date_time(drop_urls$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
str(drop_urls)
which(is.na(drop_urls$Contract.Valid.Until))
drop_urls$Con <- year(drop_urls$Contract.Valid.Until)
drop_urls <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage))
drop_urls$Contract.Valid.Until <- parse_date_time(drop_urls$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
drop_urls$Contract.Valid.Until <- year(drop_urls$Contract.Valid.Until)
drop_urls$Contract.Valid.Until <- as.integer(year(drop_urls$Contract.Valid.Until))
str(drop_urls)
which(is.na(drop_urls$Contract.Valid.Until))
drop_urls$Contract.Valid.Until[is.na(drop_urls$Contract.Valid.Until)] <- 0
which(is.na(drop_urls$Contract.Valid.Until))
#Do the same with Joined
drop_urls$Joined <- parse_date_time(drop_urls$Joined,
orders = c('bdY', 'dbY'))
drop_urls$Joined <- as.integer(year(drop_urls$Joined))
drop_urls$Joined[is.na(drop_urls$Joined)] <- 0
source('~/Python_Projects/FIFA_19/cleaning_data.R')
summary(drop_urls$Nationality)
which(drop_urls$Nationality == '')
which(drop_urls$Nationality == ' ')
unique(drop_urls$Nationality)
which(is.na(drop_urls$X))
which(is.na(drop_urls$ID))
source('~/Python_Projects/FIFA_19/cleaning_data.R')
library(pylr)
library(plyr)
df$Nationality <- mapvalues(df$Nationality,from = unique(df$Nationality), to = 1:nrow(df$Nationality))
nrow(df$Nationality)
df$Nationality <- mapvalues(df$Nationality,from = unique(df$Nationality), to = 1:nrow(df))
length(unique(df$Nationality))
df$Nationality <- mapvalues(df$Nationality,from = unique(df$Nationality), to = 1:length(unique(df$Nationality)))
#Assign integer to Nationality
df$Nationality <- mapvalues(df$Nationality,
from = unique(df$Nationality),
to = 1:length(unique(df$Nationality)))
df <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage, Name))
#Convert Contract.Valid.Until to integer. There are various strings denoting dates,
#so I converted  to datetime first.
df$Contract.Valid.Until <- parse_date_time(df$Contract.Valid.Until,
orders = c('Y', 'bdY', 'dbY'))
df$Contract.Valid.Until <- as.integer(year(df$Contract.Valid.Until))
df$Contract.Valid.Until[is.na(df$Contract.Valid.Until)] <- 0
#Do the same with Joined
df$Joined <- parse_date_time(df$Joined,
orders = c('bdY', 'dbY'))
df$Joined <- as.integer(year(df$Joined))
df$Joined[is.na(df$Joined)] <- 0
#Assign integer to Nationality
df$Nationality <- mapvalues(df$Nationality,
from = unique(df$Nationality),
to = 1:length(unique(df$Nationality)))
df$Nationality <- as.integer(df$Nationality)
unique(df$Club)
which(df$Club == '')
which(df$Club == ' ')
df$Club <- mapvalues(df$Club,
from = unique(df$Club),
to = 1:length(unique(df$Club)))
df$Club <- as.integer(df$Club)
#Assign 1 or 0 to Preferred Foot
ifelse(df$Preferred.Foot == 'Left', 1, 0)
#Assign 1 or 0 to Preferred Foot
df$Preferred.Foot <- ifelse(df$Preferred.Foot == 'Left', 1, 0)
which(is.na(df$Preferred.Foot))
source('~/Python_Projects/FIFA_19/cleaning_data.R')
which(df$Preferred.Foot == '')
which(df$Preferred.Foot == ' ')
#Assign 1 or 0 to Preferred Foot
df$Preferred.Foot <- ifelse(df$Preferred.Foot == NA, 'None')
#Assign 1 or 0 to Preferred Foot
df$Preferred.Foot <- ifelse(is.na(df$Preferred.Foot), 'None')
#Assign 1 or 0 to Preferred Foot
if(is.na(df$Preferred.Foot))
if(is.na(df$Preferred.Foot))
df$Preferred.Foot = -1
return(-1)
if(is.na(df$Preferred.Foot))
return(-1)
#Assign 1 or 0 to Preferred Foot
df$Preferred.Foot[is.na(df$Preferred.Foot)] <- -1
df$Preferred.Foot <- ifelse(df$Preferred.Foot == 'Left', 1, 0)
which(is.na(df$Preferred.Foot))
source('~/Python_Projects/FIFA_19/cleaning_data.R')
unique(df$Work.Rate)
unique(df$Body.Type)
unique(df$Real.Face)
df$Real.Face[is.na(df$Real.Face)] <- 0
df$Real.Face <- ifelse(df$Real.Face == 'Yes', 1, -1)
df$Body.Type <- mapvalues(df$Body.Type,
from = unique(df$Body.Type),
to = 1:length(unique(df$Body.Type)))
df$Body.Type <- as.integer(df$Body.Type)
which(is.na(df$Body.Type))
which(is.na(df$Real.Face))
unique(df$Work.Rate)
df$Work.Rate <- mapvalues(df$Work.Rate,
from = unique(df$Work.Rate),
to = 1:length(unique(df$Work.Rate)))
df$Work.Rate <- as.integer(df$Work.Rate)
unique(df$Position)
source('~/Python_Projects/FIFA_19/cleaning_data.R')
source('~/Python_Projects/FIFA_19/cleaning_data.R')
which(is.na(df$Position))
df <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage, Name))
df_check <- df[13237:13284,]
View(df_check)
drop(df[13237:13284,])
remove(df[13237:13284,])
#The following rows containg nothing but NA values for all columns, so I'm removing them
rows_to_drop <- 13237:13284
df <- df[-rows_to_drop,]
source('~/Python_Projects/FIFA_19/cleaning_data.R')
source('~/Python_Projects/FIFA_19/cleaning_data.R')
View(df)
unique(df$Position)
which(is.na(df$Position))
which(is.na(Age))
which(is.na(df$Age))
which(is.na(df$Overall))
which)is.na(df$Potential)
which(is.na(df$Potential))
which(is.na(df$Special))
which(is.na(df$International.Reputation))
which(is.na(df$Weak.Foot))
which(is.na(df$Skill.Moves))
df <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage, Name, Loaned.From))
View(df)
df <- subset(data_raw, select = -c(LS:RB))
source('~/Python_Projects/FIFA_19/cleaning_data.R')
source('~/Python_Projects/FIFA_19/cleaning_data.R')
unique(df$Position)
#Assign integer to Position. I don't have a good way to handle NA values yet,
#so they're their own class for now
df$Position <- mapvalues(df$Position,
from = unique(df$Position),
to = 1:length(unique(df$Position)))
df$Position <- as.integer(df$Position)
which(is.na(df$Jersey.Number))
df <- subset(data_raw, select = -c(Flag,Club.Logo, Photo, Value, Wage, Name, Loaned.From))
#I'm keeping this subset command separate because I may include these later.
#They don't seem super useful
df <- subset(df, select = -c(LS:RB))
which(is.na(df$Position))
#The following rows contain only NA values for most columns, so I'm removing them
rows_to_drop <- 13237:13284
df <- df[-rows_to_drop,]
which(is.na(df$Jersey.Number))
which(is.na(df$Position))
df_check <- df[c(which(is.na(df$Jersey.Number))),]
View(df_check)
which(is.na(df$Jersey.Number))
#Assign NAs in Jersey.Number to -1
df$Jersey.Number[is.na(df$Jersey.Number)] <- -1
source('~/Python_Projects/FIFA_19/cleaning_data.R')
source('~/Python_Projects/FIFA_19/cleaning_data.R')
unique(df$Height)
data <- read.csv('data.csv')
data <- read.csv('data.csv')
height <- data$Height
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
debugSource('~/Python_Projects/FIFA_19/create_string_conversion_fcn_for_height.R')
source('~/Python_Projects/FIFA_19/cleaning_data.R')
df$Height <- apply(df$Height, MARGIN = 1, FUN = convert_to_height())
df$Height <- apply(df$Height, MARGIN = 1, FUN = convert_to_height)
df$Height <- sapply(df$Height, MARGIN = 1, FUN = convert_to_height)
df$Height <- sapply(df$Height, FUN = convert_to_height)
unique(df$Height)
as.integer(df$Weight)
which(is.na(df$Weight))
library(stringr)
#Convert Weight to numeric without the 'lbs'
convert_to_weight <- function(character) {
weight_string <- str_split(character, pattern = 'lbs')
weight <- as.integer(weight_string[0])
return(weight)
}
first_try <- convert_to_weight(df$Weight[1])
first_try <- convert_to_weight(df$Weight[1])
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
first_try <- convert_to_weight(df$Weight[1])
source('~/Python_Projects/FIFA_19/cleaning_data.R')
source('~/Python_Projects/FIFA_19/cleaning_data.R')
str(df$Height)
str(first_try)
df$Weight <- sapply(df$Weight, FUN = convert_to_weight)
which(is.na(df$Weight))
unique(df$Weight)
which(is.na(df$Crossing))
which(is.na(df$Finishing))
which(is.na(df$HeadingAccuracy))
which(is.na(df$ShortPassing))
which(is.na(df$Volleys))
which(is.na(df$Dribbling))
which(is.na(df$Curve))
which(is.na(df[c(Crossing:GKRefelxes),]))
df_check <- subset(df, select = c(Crossing:GKReflexes))
which(is.na(df_check))
which(is.na(data_raw))
which(is.na(df$Release.Clause))
View(df)
x <- df$Release.Clause[1]
str(x)
str_extract(x,'€')
str_extract(x,'[€]\\')
str_extract(x,'\\€[0-9,]+')
str_extract(x,'\\€([0-9,.]+)')
str_extract(x,'\\([0-9,.]+)')
str_extract(x,'\\([0-9,.]+)')
str_extract(x,'\\€([0-9,.]+)')
str_extract(x,'\\€([0-9,.]+)')[,2]
x <- str_extract(x,'\\€([0-9,.]+)')[,2]
x <- str_extract(x,'\\€([0-9,.]+)')
str(x)
library(stringr)
library(stringr)
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
source('~/Python_Projects/FIFA_19/cleaning_data.R')
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
# Extract all matches
str_extract_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all(shopping_list, "\\d")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all(shopping_list, "\\d")
# Simplify results into character matrix
str_extract_all(shopping_list, "\\b[a-z]+\\b", simplify = TRUE)
str_extract_all(shopping_list, "\\d", simplify = TRUE)
# Extract all words
str_extract_all("This is, suprisingly, a sentence.", boundary("word"))
x <- df$Release.Clause[1]
str_extract_all((x, pattern = '\\d'))
str_extract_all(x, pattern = '\\d')
str_extract_all(x, pattern = '\\[0-9,]+')
str_extract_all(x, pattern = '\\[0-9,.]+')
str_extract(x, pattern = '\\[0-9,.]+')
str_extract(x, '\\[0-9,.]+')
str_extract(x, '\\€[0-9,.]+')
fruits <- c("one apple", "two pears", "three bananas")
str_remove(fruits, "[aeiou]")
str_remove_all(fruits, "[aeiou]")
x <- str_extract(x, '\\€[0-9,.]+')
x <- str_remove(x, '€')
x <- as.numeric(x)
#Remove € and 'M' from Release.Clause and convert to integer (in millions)
convert_from_euro <- function(character) {
euro_string <- str_extract(character, pattern = '\\€[0-9,.]+')
euro_string <- str_remove(str_string, pattern = '€')
euro <- as.numeric(euro_string) * 10^6
return(euro)
}
df$Release.Clause <- sapply(df$Release.Clause, FUN = convert_from_euro)
df$Release.Clause <- sapply(df$Release.Clause, FUN = convert_from_euro)
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
df$Release.Clause <- sapply(df$Release.Clause, FUN = convert_from_euro)
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
x <- df$Release.Clause[1]
x <- str_extract(x,pattern = '\\€[0-9,.]+')
x <- str_extract(x,pattern = '\\[0-9,.]+')
x <- df$Release.Clause[1]
x <- str_extract(x,pattern = '\\€[0-9,.]+')
x <- str_remove(x,'€')
x <- df$Release.Clause[1]
x <- str_extract(x,pattern = '\\€[0-9,.]+')
str(x)
x <- str_remove(x,'€')
debugSource('~/Python_Projects/FIFA_19/cleaning_data.R')
#Remove € and 'M' from Release.Clause and convert to integer (in millions)
convert_from_euro <- function(character) {
euro_string <- str_extract(character, pattern = '\\€[0-9,.]+')
euro_string <- str_remove(euro_string, '\\€')
euro <- as.numeric(euro_string) * 10^6
return(euro)
}
df$Release.Clause <- sapply(df$Release.Clause, FUN = convert_from_euro)
which(is.na(df))
source('~/Python_Projects/FIFA_19/cleaning_data.R')
which(is.na(df))
View(df)
unique(df)
anyNA(df)
which(is.na(df$X))
which(is.na(df$ID))
which(is.na(df$Age))
which(is.na(df$Nationality))
which(is.na(df$Overall))
which(is.na(df$Potential))
which(is.na(df$Club))
which(is.na(df$Special))
which(is.na(df$Preferred.Foot))
which(is.na(df$International.Reputation))
which(is.na(df$Weak.Foot))
which(is.na(df$Skill.Moves))
which(is.na(df$Work.Rate))
which(is.na(df$Body.Type))
which(is.na(df$Real.Face))
which(is.na(df$Position))
unique(df)
apply(is.na(df), 2, which)
df$Release.Clause[is.na(df$Release.Clause)] <- 0
which(is.na(df))
#Export data to file
write.csv(data, 'CleanData.csv')
#Export data to file
write.csv(df, 'CleanData.csv')
source('~/Python_Projects/FIFA_19/cleaning_data.R')
fifa_data <- read.csv('CleanData.csv')
which(is.na(fifa_data))
source('~/Python_Projects/FIFA_19/main.R')
source('~/Python_Projects/FIFA_19/main.R')
